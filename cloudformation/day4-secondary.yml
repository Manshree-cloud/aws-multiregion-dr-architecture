AWSTemplateFormatVersion: '2010-09-09'
Description: Day 4 - Secondary region VPC (2 public + 2 private) + ASG (desired=1).

Parameters:
  ProjectName:
    Type: String
    Default: dr-sec
  VpcCidr:
    Type: String
    Default: 10.41.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.41.1.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.41.2.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.41.11.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.41.12.0/24
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Existing key pair name in us-east-1 (e.g., dr-key)
  InstanceType:
    Type: String
    Default: t3.micro
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [ { Key: Name, Value: !Sub '${ProjectName}-vpc' } ]

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [ { Key: Name, Value: !Sub '${ProjectName}-igw' } ]

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags: [ { Key: Name, Value: !Sub '${ProjectName}-public-az1' } ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags: [ { Key: Name, Value: !Sub '${ProjectName}-public-az2' } ]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags: [ { Key: Name, Value: !Sub '${ProjectName}-private-az1' } ]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags: [ { Key: Name, Value: !Sub '${ProjectName}-private-az2' } ]

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [ { Key: Name, Value: !Sub '${ProjectName}-public-rt' } ]

  PublicRouteDefault:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PublicSubnet1Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet2

  PrivateRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [ { Key: Name, Value: !Sub '${ProjectName}-private-rt-az1' } ]

  PrivateRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [ { Key: Name, Value: !Sub '${ProjectName}-private-rt-az2' } ]

  PrivateSubnet1Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT2
      SubnetId: !Ref PrivateSubnet2

  AppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP(80) and SSH(22)
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0 }
        - { IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: 0.0.0.0/0 }
      Tags: [ { Key: Name, Value: !Sub '${ProjectName}-asg-sg' } ]

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds: [ !Ref AppSG ]
        MetadataOptions: { HttpTokens: required }
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            dnf -y update
            dnf -y install nginx
            systemctl enable nginx
            systemctl start nginx
            TOKEN=$(curl -sX PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
            IID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
            AZ=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/availability-zone)
            cat >/usr/share/nginx/html/index.html <<HTML
            <html><body style='font-family:sans-serif'>
            <h1>DR Day 4 â€” Secondary Region</h1>
            <p><b>Region:</b> ${AWS::Region}</p>
            <p><b>AZ:</b> $AZ</p>
            <p><b>Instance ID:</b> $IID</p>
            </body></html>
            HTML

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-asg-instance'
          PropagateAtLaunch: true

Outputs:
  VpcId: { Description: Secondary VPC ID, Value: !Ref VPC }
  PublicSubnetIds: { Description: Public subnets, Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ] }
  ASGName: { Description: Auto Scaling Group name, Value: !Ref ASG }
